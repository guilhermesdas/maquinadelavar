// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2018 14:50:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    COMPLETA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module COMPLETA_vlg_sample_tst(
	clk,
	d1,
	d2,
	d3,
	d4,
	d5,
	d6,
	sampler_tx
);
input  clk;
input [3:0] d1;
input [3:0] d2;
input [3:0] d3;
input [3:0] d4;
input [3:0] d5;
input [3:0] d6;
output sampler_tx;

reg sample;
time current_time;
always @(clk or d1 or d2 or d3 or d4 or d5 or d6)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module COMPLETA_vlg_check_tst (
	dsf_e_LCD_b,
	dsf_RS_o,
	dsf_RW_o,
	dt,
	e,
	saida,
	sampler_rx
);
input  dsf_e_LCD_b;
input  dsf_RS_o;
input  dsf_RW_o;
input [7:0] dt;
input  e;
input [7:0] saida;
input sampler_rx;

reg  dsf_e_LCD_b_expected;
reg  dsf_RS_o_expected;
reg  dsf_RW_o_expected;
reg [7:0] dt_expected;
reg  e_expected;
reg [7:0] saida_expected;

reg  dsf_e_LCD_b_prev;
reg  dsf_RS_o_prev;
reg  dsf_RW_o_prev;
reg [7:0] dt_prev;
reg  e_prev;
reg [7:0] saida_prev;

reg [7:0] dt_expected_prev;
reg [7:0] saida_expected_prev;

reg [7:0] last_dt_exp;
reg [7:0] last_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	dsf_e_LCD_b_prev = dsf_e_LCD_b;
	dsf_RS_o_prev = dsf_RS_o;
	dsf_RW_o_prev = dsf_RW_o;
	dt_prev = dt;
	e_prev = e;
	saida_prev = saida;
end

// update expected /o prevs

always @(trigger)
begin
	dt_expected_prev = dt_expected;
	saida_expected_prev = saida_expected;
end


// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 
// expected dt[ 7 ]
initial
begin
	dt_expected[7] = 1'bX;
end 
// expected dt[ 6 ]
initial
begin
	dt_expected[6] = 1'bX;
end 
// expected dt[ 5 ]
initial
begin
	dt_expected[5] = 1'bX;
end 
// expected dt[ 4 ]
initial
begin
	dt_expected[4] = 1'bX;
end 
// expected dt[ 3 ]
initial
begin
	dt_expected[3] = 1'bX;
end 
// expected dt[ 2 ]
initial
begin
	dt_expected[2] = 1'bX;
end 
// expected dt[ 1 ]
initial
begin
	dt_expected[1] = 1'bX;
end 
// expected dt[ 0 ]
initial
begin
	dt_expected[0] = 1'bX;
end 
// generate trigger
always @(dsf_e_LCD_b_expected or dsf_e_LCD_b or dsf_RS_o_expected or dsf_RS_o or dsf_RW_o_expected or dsf_RW_o or dt_expected or dt or e_expected or e or saida_expected or saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dsf_e_LCD_b = %b | expected dsf_RS_o = %b | expected dsf_RW_o = %b | expected dt = %b | expected e = %b | expected saida = %b | ",dsf_e_LCD_b_expected_prev,dsf_RS_o_expected_prev,dsf_RW_o_expected_prev,dt_expected_prev,e_expected_prev,saida_expected_prev);
	$display("| real dsf_e_LCD_b = %b | real dsf_RS_o = %b | real dsf_RW_o = %b | real dt = %b | real e = %b | real saida = %b | ",dsf_e_LCD_b_prev,dsf_RS_o_prev,dsf_RW_o_prev,dt_prev,e_prev,saida_prev);
`endif
	if (
		( dt_expected_prev[0] !== 1'bx ) && ( dt_prev[0] !== dt_expected_prev[0] )
		&& ((dt_expected_prev[0] !== last_dt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[0] = dt_expected_prev[0];
	end
	if (
		( dt_expected_prev[1] !== 1'bx ) && ( dt_prev[1] !== dt_expected_prev[1] )
		&& ((dt_expected_prev[1] !== last_dt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[1] = dt_expected_prev[1];
	end
	if (
		( dt_expected_prev[2] !== 1'bx ) && ( dt_prev[2] !== dt_expected_prev[2] )
		&& ((dt_expected_prev[2] !== last_dt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[2] = dt_expected_prev[2];
	end
	if (
		( dt_expected_prev[3] !== 1'bx ) && ( dt_prev[3] !== dt_expected_prev[3] )
		&& ((dt_expected_prev[3] !== last_dt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[3] = dt_expected_prev[3];
	end
	if (
		( dt_expected_prev[4] !== 1'bx ) && ( dt_prev[4] !== dt_expected_prev[4] )
		&& ((dt_expected_prev[4] !== last_dt_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[4] = dt_expected_prev[4];
	end
	if (
		( dt_expected_prev[5] !== 1'bx ) && ( dt_prev[5] !== dt_expected_prev[5] )
		&& ((dt_expected_prev[5] !== last_dt_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[5] = dt_expected_prev[5];
	end
	if (
		( dt_expected_prev[6] !== 1'bx ) && ( dt_prev[6] !== dt_expected_prev[6] )
		&& ((dt_expected_prev[6] !== last_dt_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[6] = dt_expected_prev[6];
	end
	if (
		( dt_expected_prev[7] !== 1'bx ) && ( dt_prev[7] !== dt_expected_prev[7] )
		&& ((dt_expected_prev[7] !== last_dt_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dt_expected_prev);
		$display ("     Real value = %b", dt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dt_exp[7] = dt_expected_prev[7];
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module COMPLETA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] d1;
reg [3:0] d2;
reg [3:0] d3;
reg [3:0] d4;
reg [3:0] d5;
reg [3:0] d6;
// wires                                               
wire dsf_e_LCD_b;
wire dsf_RS_o;
wire dsf_RW_o;
wire [7:0] dt;
wire e;
wire [7:0] saida;

wire sampler;                             

// assign statements (if any)                          
COMPLETA i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.d6(d6),
	.dsf_e_LCD_b(dsf_e_LCD_b),
	.dsf_RS_o(dsf_RS_o),
	.dsf_RW_o(dsf_RW_o),
	.dt(dt),
	.e(e),
	.saida(saida)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

COMPLETA_vlg_sample_tst tb_sample (
	.clk(clk),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.d6(d6),
	.sampler_tx(sampler)
);

COMPLETA_vlg_check_tst tb_out(
	.dsf_e_LCD_b(dsf_e_LCD_b),
	.dsf_RS_o(dsf_RS_o),
	.dsf_RW_o(dsf_RW_o),
	.dt(dt),
	.e(e),
	.saida(saida),
	.sampler_rx(sampler)
);
endmodule

