// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2018 02:53:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    divfreq
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module divfreq_vlg_sample_tst(
	cin,
	clk_fpga,
	sampler_tx
);
input  cin;
input  clk_fpga;
output sampler_tx;

reg sample;
time current_time;
always @(cin or clk_fpga)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module divfreq_vlg_check_tst (
	cout,
	q1hz,
	q1khz,
	q153khz,
	q500hz,
	sampler_rx
);
input  cout;
input [8:0] q1hz;
input [7:0] q1khz;
input [8:0] q153khz;
input [1:0] q500hz;
input sampler_rx;

reg  cout_expected;
reg [8:0] q1hz_expected;
reg [7:0] q1khz_expected;
reg [8:0] q153khz_expected;
reg [1:0] q500hz_expected;

reg  cout_prev;
reg [8:0] q1hz_prev;
reg [7:0] q1khz_prev;
reg [8:0] q153khz_prev;
reg [1:0] q500hz_prev;

reg [8:0] q1hz_expected_prev;
reg [7:0] q1khz_expected_prev;
reg [8:0] q153khz_expected_prev;
reg [1:0] q500hz_expected_prev;

reg [8:0] last_q1hz_exp;
reg [7:0] last_q1khz_exp;
reg [8:0] last_q153khz_exp;
reg [1:0] last_q500hz_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	q1hz_prev = q1hz;
	q1khz_prev = q1khz;
	q153khz_prev = q153khz;
	q500hz_prev = q500hz;
end

// update expected /o prevs

always @(trigger)
begin
	q1hz_expected_prev = q1hz_expected;
	q1khz_expected_prev = q1khz_expected;
	q153khz_expected_prev = q153khz_expected;
	q500hz_expected_prev = q500hz_expected;
end


// expected q153khz[ 8 ]
initial
begin
	q153khz_expected[8] = 1'bX;
end 
// expected q153khz[ 7 ]
initial
begin
	q153khz_expected[7] = 1'bX;
end 
// expected q153khz[ 6 ]
initial
begin
	q153khz_expected[6] = 1'bX;
end 
// expected q153khz[ 5 ]
initial
begin
	q153khz_expected[5] = 1'bX;
end 
// expected q153khz[ 4 ]
initial
begin
	q153khz_expected[4] = 1'bX;
end 
// expected q153khz[ 3 ]
initial
begin
	q153khz_expected[3] = 1'bX;
end 
// expected q153khz[ 2 ]
initial
begin
	q153khz_expected[2] = 1'bX;
end 
// expected q153khz[ 1 ]
initial
begin
	q153khz_expected[1] = 1'bX;
end 
// expected q153khz[ 0 ]
initial
begin
	q153khz_expected[0] = 1'bX;
end 
// expected q1khz[ 7 ]
initial
begin
	q1khz_expected[7] = 1'bX;
end 
// expected q1khz[ 6 ]
initial
begin
	q1khz_expected[6] = 1'bX;
end 
// expected q1khz[ 5 ]
initial
begin
	q1khz_expected[5] = 1'bX;
end 
// expected q1khz[ 4 ]
initial
begin
	q1khz_expected[4] = 1'bX;
end 
// expected q1khz[ 3 ]
initial
begin
	q1khz_expected[3] = 1'bX;
end 
// expected q1khz[ 2 ]
initial
begin
	q1khz_expected[2] = 1'bX;
end 
// expected q1khz[ 1 ]
initial
begin
	q1khz_expected[1] = 1'bX;
end 
// expected q1khz[ 0 ]
initial
begin
	q1khz_expected[0] = 1'bX;
end 
// expected q500hz[ 1 ]
initial
begin
	q500hz_expected[1] = 1'bX;
end 
// expected q500hz[ 0 ]
initial
begin
	q500hz_expected[0] = 1'bX;
end 
// expected q1hz[ 8 ]
initial
begin
	q1hz_expected[8] = 1'bX;
end 
// expected q1hz[ 7 ]
initial
begin
	q1hz_expected[7] = 1'bX;
end 
// expected q1hz[ 6 ]
initial
begin
	q1hz_expected[6] = 1'bX;
end 
// expected q1hz[ 5 ]
initial
begin
	q1hz_expected[5] = 1'bX;
end 
// expected q1hz[ 4 ]
initial
begin
	q1hz_expected[4] = 1'bX;
end 
// expected q1hz[ 3 ]
initial
begin
	q1hz_expected[3] = 1'bX;
end 
// expected q1hz[ 2 ]
initial
begin
	q1hz_expected[2] = 1'bX;
end 
// expected q1hz[ 1 ]
initial
begin
	q1hz_expected[1] = 1'bX;
end 
// expected q1hz[ 0 ]
initial
begin
	q1hz_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or q1hz_expected or q1hz or q1khz_expected or q1khz or q153khz_expected or q153khz or q500hz_expected or q500hz)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected q1hz = %b | expected q1khz = %b | expected q153khz = %b | expected q500hz = %b | ",cout_expected_prev,q1hz_expected_prev,q1khz_expected_prev,q153khz_expected_prev,q500hz_expected_prev);
	$display("| real cout = %b | real q1hz = %b | real q1khz = %b | real q153khz = %b | real q500hz = %b | ",cout_prev,q1hz_prev,q1khz_prev,q153khz_prev,q500hz_prev);
`endif
	if (
		( q1hz_expected_prev[0] !== 1'bx ) && ( q1hz_prev[0] !== q1hz_expected_prev[0] )
		&& ((q1hz_expected_prev[0] !== last_q1hz_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[0] = q1hz_expected_prev[0];
	end
	if (
		( q1hz_expected_prev[1] !== 1'bx ) && ( q1hz_prev[1] !== q1hz_expected_prev[1] )
		&& ((q1hz_expected_prev[1] !== last_q1hz_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[1] = q1hz_expected_prev[1];
	end
	if (
		( q1hz_expected_prev[2] !== 1'bx ) && ( q1hz_prev[2] !== q1hz_expected_prev[2] )
		&& ((q1hz_expected_prev[2] !== last_q1hz_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[2] = q1hz_expected_prev[2];
	end
	if (
		( q1hz_expected_prev[3] !== 1'bx ) && ( q1hz_prev[3] !== q1hz_expected_prev[3] )
		&& ((q1hz_expected_prev[3] !== last_q1hz_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[3] = q1hz_expected_prev[3];
	end
	if (
		( q1hz_expected_prev[4] !== 1'bx ) && ( q1hz_prev[4] !== q1hz_expected_prev[4] )
		&& ((q1hz_expected_prev[4] !== last_q1hz_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[4] = q1hz_expected_prev[4];
	end
	if (
		( q1hz_expected_prev[5] !== 1'bx ) && ( q1hz_prev[5] !== q1hz_expected_prev[5] )
		&& ((q1hz_expected_prev[5] !== last_q1hz_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[5] = q1hz_expected_prev[5];
	end
	if (
		( q1hz_expected_prev[6] !== 1'bx ) && ( q1hz_prev[6] !== q1hz_expected_prev[6] )
		&& ((q1hz_expected_prev[6] !== last_q1hz_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[6] = q1hz_expected_prev[6];
	end
	if (
		( q1hz_expected_prev[7] !== 1'bx ) && ( q1hz_prev[7] !== q1hz_expected_prev[7] )
		&& ((q1hz_expected_prev[7] !== last_q1hz_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[7] = q1hz_expected_prev[7];
	end
	if (
		( q1hz_expected_prev[8] !== 1'bx ) && ( q1hz_prev[8] !== q1hz_expected_prev[8] )
		&& ((q1hz_expected_prev[8] !== last_q1hz_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1hz[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1hz_expected_prev);
		$display ("     Real value = %b", q1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1hz_exp[8] = q1hz_expected_prev[8];
	end
	if (
		( q1khz_expected_prev[0] !== 1'bx ) && ( q1khz_prev[0] !== q1khz_expected_prev[0] )
		&& ((q1khz_expected_prev[0] !== last_q1khz_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[0] = q1khz_expected_prev[0];
	end
	if (
		( q1khz_expected_prev[1] !== 1'bx ) && ( q1khz_prev[1] !== q1khz_expected_prev[1] )
		&& ((q1khz_expected_prev[1] !== last_q1khz_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[1] = q1khz_expected_prev[1];
	end
	if (
		( q1khz_expected_prev[2] !== 1'bx ) && ( q1khz_prev[2] !== q1khz_expected_prev[2] )
		&& ((q1khz_expected_prev[2] !== last_q1khz_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[2] = q1khz_expected_prev[2];
	end
	if (
		( q1khz_expected_prev[3] !== 1'bx ) && ( q1khz_prev[3] !== q1khz_expected_prev[3] )
		&& ((q1khz_expected_prev[3] !== last_q1khz_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[3] = q1khz_expected_prev[3];
	end
	if (
		( q1khz_expected_prev[4] !== 1'bx ) && ( q1khz_prev[4] !== q1khz_expected_prev[4] )
		&& ((q1khz_expected_prev[4] !== last_q1khz_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[4] = q1khz_expected_prev[4];
	end
	if (
		( q1khz_expected_prev[5] !== 1'bx ) && ( q1khz_prev[5] !== q1khz_expected_prev[5] )
		&& ((q1khz_expected_prev[5] !== last_q1khz_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[5] = q1khz_expected_prev[5];
	end
	if (
		( q1khz_expected_prev[6] !== 1'bx ) && ( q1khz_prev[6] !== q1khz_expected_prev[6] )
		&& ((q1khz_expected_prev[6] !== last_q1khz_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[6] = q1khz_expected_prev[6];
	end
	if (
		( q1khz_expected_prev[7] !== 1'bx ) && ( q1khz_prev[7] !== q1khz_expected_prev[7] )
		&& ((q1khz_expected_prev[7] !== last_q1khz_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1khz[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1khz_expected_prev);
		$display ("     Real value = %b", q1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q1khz_exp[7] = q1khz_expected_prev[7];
	end
	if (
		( q153khz_expected_prev[0] !== 1'bx ) && ( q153khz_prev[0] !== q153khz_expected_prev[0] )
		&& ((q153khz_expected_prev[0] !== last_q153khz_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[0] = q153khz_expected_prev[0];
	end
	if (
		( q153khz_expected_prev[1] !== 1'bx ) && ( q153khz_prev[1] !== q153khz_expected_prev[1] )
		&& ((q153khz_expected_prev[1] !== last_q153khz_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[1] = q153khz_expected_prev[1];
	end
	if (
		( q153khz_expected_prev[2] !== 1'bx ) && ( q153khz_prev[2] !== q153khz_expected_prev[2] )
		&& ((q153khz_expected_prev[2] !== last_q153khz_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[2] = q153khz_expected_prev[2];
	end
	if (
		( q153khz_expected_prev[3] !== 1'bx ) && ( q153khz_prev[3] !== q153khz_expected_prev[3] )
		&& ((q153khz_expected_prev[3] !== last_q153khz_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[3] = q153khz_expected_prev[3];
	end
	if (
		( q153khz_expected_prev[4] !== 1'bx ) && ( q153khz_prev[4] !== q153khz_expected_prev[4] )
		&& ((q153khz_expected_prev[4] !== last_q153khz_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[4] = q153khz_expected_prev[4];
	end
	if (
		( q153khz_expected_prev[5] !== 1'bx ) && ( q153khz_prev[5] !== q153khz_expected_prev[5] )
		&& ((q153khz_expected_prev[5] !== last_q153khz_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[5] = q153khz_expected_prev[5];
	end
	if (
		( q153khz_expected_prev[6] !== 1'bx ) && ( q153khz_prev[6] !== q153khz_expected_prev[6] )
		&& ((q153khz_expected_prev[6] !== last_q153khz_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[6] = q153khz_expected_prev[6];
	end
	if (
		( q153khz_expected_prev[7] !== 1'bx ) && ( q153khz_prev[7] !== q153khz_expected_prev[7] )
		&& ((q153khz_expected_prev[7] !== last_q153khz_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[7] = q153khz_expected_prev[7];
	end
	if (
		( q153khz_expected_prev[8] !== 1'bx ) && ( q153khz_prev[8] !== q153khz_expected_prev[8] )
		&& ((q153khz_expected_prev[8] !== last_q153khz_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q153khz[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q153khz_expected_prev);
		$display ("     Real value = %b", q153khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q153khz_exp[8] = q153khz_expected_prev[8];
	end
	if (
		( q500hz_expected_prev[0] !== 1'bx ) && ( q500hz_prev[0] !== q500hz_expected_prev[0] )
		&& ((q500hz_expected_prev[0] !== last_q500hz_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q500hz[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q500hz_expected_prev);
		$display ("     Real value = %b", q500hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q500hz_exp[0] = q500hz_expected_prev[0];
	end
	if (
		( q500hz_expected_prev[1] !== 1'bx ) && ( q500hz_prev[1] !== q500hz_expected_prev[1] )
		&& ((q500hz_expected_prev[1] !== last_q500hz_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q500hz[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q500hz_expected_prev);
		$display ("     Real value = %b", q500hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q500hz_exp[1] = q500hz_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module divfreq_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg clk_fpga;
// wires                                               
wire cout;
wire [8:0] q1hz;
wire [7:0] q1khz;
wire [8:0] q153khz;
wire [1:0] q500hz;

wire sampler;                             

// assign statements (if any)                          
divfreq i1 (
// port map - connection between master ports and signals/registers   
	.cin(cin),
	.clk_fpga(clk_fpga),
	.cout(cout),
	.q1hz(q1hz),
	.q1khz(q1khz),
	.q153khz(q153khz),
	.q500hz(q500hz)
);

// cin
initial
begin
	cin = 1'b1;
	cin = #990000 1'b0;
end 

// clk_fpga
always
begin
	clk_fpga = 1'b0;
	clk_fpga = #10000 1'b1;
	#10000;
end 

divfreq_vlg_sample_tst tb_sample (
	.cin(cin),
	.clk_fpga(clk_fpga),
	.sampler_tx(sampler)
);

divfreq_vlg_check_tst tb_out(
	.cout(cout),
	.q1hz(q1hz),
	.q1khz(q1khz),
	.q153khz(q153khz),
	.q500hz(q500hz),
	.sampler_rx(sampler)
);
endmodule

