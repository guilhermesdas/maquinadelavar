// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2018 15:44:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    historia4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module historia4_vlg_sample_tst(
	botao,
	clk_1khz,
	clk_153khz,
	sampler_tx
);
input  botao;
input  clk_1khz;
input  clk_153khz;
output sampler_tx;

reg sample;
time current_time;
always @(botao or clk_1khz or clk_153khz)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module historia4_vlg_check_tst (
	off,
	rst,
	Standby,
	sampler_rx
);
input  off;
input  rst;
input  Standby;
input sampler_rx;

reg  off_expected;
reg  rst_expected;
reg  Standby_expected;

reg  off_prev;
reg  rst_prev;
reg  Standby_prev;

reg  off_expected_prev;
reg  rst_expected_prev;
reg  Standby_expected_prev;

reg  last_off_exp;
reg  last_rst_exp;
reg  last_Standby_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	off_prev = off;
	rst_prev = rst;
	Standby_prev = Standby;
end

// update expected /o prevs

always @(trigger)
begin
	off_expected_prev = off_expected;
	rst_expected_prev = rst_expected;
	Standby_expected_prev = Standby_expected;
end



// expected off
initial
begin
	off_expected = 1'bX;
end 

// expected rst
initial
begin
	rst_expected = 1'bX;
end 

// expected Standby
initial
begin
	Standby_expected = 1'bX;
end 
// generate trigger
always @(off_expected or off or rst_expected or rst or Standby_expected or Standby)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected off = %b | expected rst = %b | expected Standby = %b | ",off_expected_prev,rst_expected_prev,Standby_expected_prev);
	$display("| real off = %b | real rst = %b | real Standby = %b | ",off_prev,rst_prev,Standby_prev);
`endif
	if (
		( off_expected_prev !== 1'bx ) && ( off_prev !== off_expected_prev )
		&& ((off_expected_prev !== last_off_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port off :: @time = %t",  $realtime);
		$display ("     Expected value = %b", off_expected_prev);
		$display ("     Real value = %b", off_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_off_exp = off_expected_prev;
	end
	if (
		( rst_expected_prev !== 1'bx ) && ( rst_prev !== rst_expected_prev )
		&& ((rst_expected_prev !== last_rst_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rst_expected_prev);
		$display ("     Real value = %b", rst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rst_exp = rst_expected_prev;
	end
	if (
		( Standby_expected_prev !== 1'bx ) && ( Standby_prev !== Standby_expected_prev )
		&& ((Standby_expected_prev !== last_Standby_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Standby :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Standby_expected_prev);
		$display ("     Real value = %b", Standby_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Standby_exp = Standby_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module historia4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao;
reg clk_1khz;
reg clk_153khz;
// wires                                               
wire off;
wire rst;
wire Standby;

wire sampler;                             

// assign statements (if any)                          
historia4 i1 (
// port map - connection between master ports and signals/registers   
	.botao(botao),
	.clk_1khz(clk_1khz),
	.clk_153khz(clk_153khz),
	.off(off),
	.rst(rst),
	.Standby(Standby)
);

// botao
initial
begin
	botao = 1'b1;
	botao = #170000 1'b0;
	botao = #90000 1'b1;
	botao = #170000 1'b0;
	botao = #70000 1'b1;
	botao = #150000 1'b0;
	botao = #90000 1'b1;
	botao = #170000 1'b0;
end 

// clk_1khz
initial
begin
	repeat(16)
	begin
		clk_1khz = 1'b0;
		clk_1khz = #30000 1'b1;
		# 30000;
	end
	clk_1khz = 1'b0;
	clk_1khz = #30000 1'b1;
end 

// clk_153khz
always
begin
	clk_153khz = 1'b0;
	clk_153khz = #5000 1'b1;
	#5000;
end 

historia4_vlg_sample_tst tb_sample (
	.botao(botao),
	.clk_1khz(clk_1khz),
	.clk_153khz(clk_153khz),
	.sampler_tx(sampler)
);

historia4_vlg_check_tst tb_out(
	.off(off),
	.rst(rst),
	.Standby(Standby),
	.sampler_rx(sampler)
);
endmodule

