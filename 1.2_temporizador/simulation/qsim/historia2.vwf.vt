// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2018 13:54:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    historia2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module historia2_vlg_sample_tst(
	cin,
	clk_1hz,
	dtRL1,
	dtRL2,
	enTE,
	rst,
	wrTE,
	sampler_tx
);
input  cin;
input  clk_1hz;
input [3:0] dtRL1;
input [3:0] dtRL2;
input  enTE;
input  rst;
input  wrTE;
output sampler_tx;

reg sample;
time current_time;
always @(cin or clk_1hz or dtRL1 or dtRL2 or enTE or rst or wrTE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module historia2_vlg_check_tst (
	dtTE1,
	dtTE2,
	endTE,
	onTE,
	sampler_rx
);
input [3:0] dtTE1;
input [3:0] dtTE2;
input  endTE;
input  onTE;
input sampler_rx;

reg [3:0] dtTE1_expected;
reg [3:0] dtTE2_expected;
reg  endTE_expected;
reg  onTE_expected;

reg [3:0] dtTE1_prev;
reg [3:0] dtTE2_prev;
reg  endTE_prev;
reg  onTE_prev;

reg [3:0] dtTE1_expected_prev;
reg [3:0] dtTE2_expected_prev;
reg  endTE_expected_prev;
reg  onTE_expected_prev;

reg [3:0] last_dtTE1_exp;
reg [3:0] last_dtTE2_exp;
reg  last_endTE_exp;
reg  last_onTE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	dtTE1_prev = dtTE1;
	dtTE2_prev = dtTE2;
	endTE_prev = endTE;
	onTE_prev = onTE;
end

// update expected /o prevs

always @(trigger)
begin
	dtTE1_expected_prev = dtTE1_expected;
	dtTE2_expected_prev = dtTE2_expected;
	endTE_expected_prev = endTE_expected;
	onTE_expected_prev = onTE_expected;
end


// expected dtTE1[ 3 ]
initial
begin
	dtTE1_expected[3] = 1'bX;
end 
// expected dtTE1[ 2 ]
initial
begin
	dtTE1_expected[2] = 1'bX;
end 
// expected dtTE1[ 1 ]
initial
begin
	dtTE1_expected[1] = 1'bX;
end 
// expected dtTE1[ 0 ]
initial
begin
	dtTE1_expected[0] = 1'bX;
end 
// expected dtTE2[ 3 ]
initial
begin
	dtTE2_expected[3] = 1'bX;
end 
// expected dtTE2[ 2 ]
initial
begin
	dtTE2_expected[2] = 1'bX;
end 
// expected dtTE2[ 1 ]
initial
begin
	dtTE2_expected[1] = 1'bX;
end 
// expected dtTE2[ 0 ]
initial
begin
	dtTE2_expected[0] = 1'bX;
end 

// expected endTE
initial
begin
	endTE_expected = 1'bX;
end 

// expected onTE
initial
begin
	onTE_expected = 1'bX;
end 
// generate trigger
always @(dtTE1_expected or dtTE1 or dtTE2_expected or dtTE2 or endTE_expected or endTE or onTE_expected or onTE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dtTE1 = %b | expected dtTE2 = %b | expected endTE = %b | expected onTE = %b | ",dtTE1_expected_prev,dtTE2_expected_prev,endTE_expected_prev,onTE_expected_prev);
	$display("| real dtTE1 = %b | real dtTE2 = %b | real endTE = %b | real onTE = %b | ",dtTE1_prev,dtTE2_prev,endTE_prev,onTE_prev);
`endif
	if (
		( dtTE1_expected_prev[0] !== 1'bx ) && ( dtTE1_prev[0] !== dtTE1_expected_prev[0] )
		&& ((dtTE1_expected_prev[0] !== last_dtTE1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE1_expected_prev);
		$display ("     Real value = %b", dtTE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dtTE1_exp[0] = dtTE1_expected_prev[0];
	end
	if (
		( dtTE1_expected_prev[1] !== 1'bx ) && ( dtTE1_prev[1] !== dtTE1_expected_prev[1] )
		&& ((dtTE1_expected_prev[1] !== last_dtTE1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE1_expected_prev);
		$display ("     Real value = %b", dtTE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dtTE1_exp[1] = dtTE1_expected_prev[1];
	end
	if (
		( dtTE1_expected_prev[2] !== 1'bx ) && ( dtTE1_prev[2] !== dtTE1_expected_prev[2] )
		&& ((dtTE1_expected_prev[2] !== last_dtTE1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE1_expected_prev);
		$display ("     Real value = %b", dtTE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dtTE1_exp[2] = dtTE1_expected_prev[2];
	end
	if (
		( dtTE1_expected_prev[3] !== 1'bx ) && ( dtTE1_prev[3] !== dtTE1_expected_prev[3] )
		&& ((dtTE1_expected_prev[3] !== last_dtTE1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE1_expected_prev);
		$display ("     Real value = %b", dtTE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dtTE1_exp[3] = dtTE1_expected_prev[3];
	end
	if (
		( dtTE2_expected_prev[0] !== 1'bx ) && ( dtTE2_prev[0] !== dtTE2_expected_prev[0] )
		&& ((dtTE2_expected_prev[0] !== last_dtTE2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE2_expected_prev);
		$display ("     Real value = %b", dtTE2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtTE2_exp[0] = dtTE2_expected_prev[0];
	end
	if (
		( dtTE2_expected_prev[1] !== 1'bx ) && ( dtTE2_prev[1] !== dtTE2_expected_prev[1] )
		&& ((dtTE2_expected_prev[1] !== last_dtTE2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE2_expected_prev);
		$display ("     Real value = %b", dtTE2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtTE2_exp[1] = dtTE2_expected_prev[1];
	end
	if (
		( dtTE2_expected_prev[2] !== 1'bx ) && ( dtTE2_prev[2] !== dtTE2_expected_prev[2] )
		&& ((dtTE2_expected_prev[2] !== last_dtTE2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE2_expected_prev);
		$display ("     Real value = %b", dtTE2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtTE2_exp[2] = dtTE2_expected_prev[2];
	end
	if (
		( dtTE2_expected_prev[3] !== 1'bx ) && ( dtTE2_prev[3] !== dtTE2_expected_prev[3] )
		&& ((dtTE2_expected_prev[3] !== last_dtTE2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtTE2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtTE2_expected_prev);
		$display ("     Real value = %b", dtTE2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtTE2_exp[3] = dtTE2_expected_prev[3];
	end
	if (
		( endTE_expected_prev !== 1'bx ) && ( endTE_prev !== endTE_expected_prev )
		&& ((endTE_expected_prev !== last_endTE_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endTE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endTE_expected_prev);
		$display ("     Real value = %b", endTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_endTE_exp = endTE_expected_prev;
	end
	if (
		( onTE_expected_prev !== 1'bx ) && ( onTE_prev !== onTE_expected_prev )
		&& ((onTE_expected_prev !== last_onTE_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onTE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onTE_expected_prev);
		$display ("     Real value = %b", onTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_onTE_exp = onTE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module historia2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg clk_1hz;
reg [3:0] dtRL1;
reg [3:0] dtRL2;
reg enTE;
reg rst;
reg wrTE;
// wires                                               
wire [3:0] dtTE1;
wire [3:0] dtTE2;
wire endTE;
wire onTE;

wire sampler;                             

// assign statements (if any)                          
historia2 i1 (
// port map - connection between master ports and signals/registers   
	.cin(cin),
	.clk_1hz(clk_1hz),
	.dtRL1(dtRL1),
	.dtRL2(dtRL2),
	.dtTE1(dtTE1),
	.dtTE2(dtTE2),
	.endTE(endTE),
	.enTE(enTE),
	.onTE(onTE),
	.rst(rst),
	.wrTE(wrTE)
);

// cin
initial
begin
	cin = 1'b1;
end 

// clk_1hz
always
begin
	clk_1hz = 1'b0;
	clk_1hz = #5000 1'b1;
	#5000;
end 
// dtRL1[ 3 ]
initial
begin
	dtRL1[3] = 1'b0;
end 
// dtRL1[ 2 ]
initial
begin
	dtRL1[2] = 1'b0;
end 
// dtRL1[ 1 ]
initial
begin
	dtRL1[1] = 1'b0;
end 
// dtRL1[ 0 ]
initial
begin
	dtRL1[0] = 1'b0;
end 
// dtRL2[ 3 ]
initial
begin
	dtRL2[3] = 1'b0;
end 
// dtRL2[ 2 ]
initial
begin
	dtRL2[2] = 1'b0;
end 
// dtRL2[ 1 ]
initial
begin
	dtRL2[1] = 1'b1;
end 
// dtRL2[ 0 ]
initial
begin
	dtRL2[0] = 1'b0;
end 

// wrTE
initial
begin
	wrTE = 1'b1;
	wrTE = #20000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #800000 1'b1;
	rst = #20000 1'b0;
end 

// enTE
initial
begin
	enTE = 1'b1;
end 

historia2_vlg_sample_tst tb_sample (
	.cin(cin),
	.clk_1hz(clk_1hz),
	.dtRL1(dtRL1),
	.dtRL2(dtRL2),
	.enTE(enTE),
	.rst(rst),
	.wrTE(wrTE),
	.sampler_tx(sampler)
);

historia2_vlg_check_tst tb_out(
	.dtTE1(dtTE1),
	.dtTE2(dtTE2),
	.endTE(endTE),
	.onTE(onTE),
	.sampler_rx(sampler)
);
endmodule

